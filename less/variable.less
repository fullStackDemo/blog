// out: ./dist/variable.css
@primary: green;
@secondary: red;
@url: './lib';

/*
* variable variables
**/
.box {
  @color: primary;

  div {
    color: @@color;
  }

  &.new {
    @color: secondary;

    div {
      color: @@color;
    }
  }
}

/*
* custom property
**/
.box {
  --color: @primary;

  div {
    color: var(--color);
  }

  &.new {
    --color: @secondary;
  }
}

/*
* Lazy Evaluation
* Variables do not need to be declared before being used.
* Note that when defining a variable twice, the last definition of 
* the variable is used, searching from the current scope.
**/

.lazy {
  color: @@var;

  &.multi {
    color: @@var;
    @lazy: #999;
  }
}

@var: lazy;
@lazy: orange;


/*
* $props v3.0.0
* Properties as Variables (NEW!!)
* You can easily treat properties like variables using the $props syntax.
* Sometimes this can make your code a litter lighter
**/

.props {
  color: #333;

  // background: $color;
  &_ok {
    background: #000;
  }
}

/*
* default variables
**/

@base-color: green;
@dark-color: darken(@base-color, 10%);

@import '@{url}/library.less';

@base-color: red;

/*
* parent selectors
**/

@name: color;

.child() {
  &_one {
    @{name}: #000;
  }

  &_two {
    @{name}: #666;
  }

  &_three {
    @{name}: #999;
  }
}

.parent {
  &.bg {
    .child();
  }

  .child();

  &,
  &Child {
    background: #000;
  }

}

@name: background-color;

/*
* changing selector order
* It is useful to prepend a selector  to the inherit (parent) selectors.
**/

.borderRadius {
  border: 1px solid red;
  border-radius: 10px;

  .noBorderRadius & {
    border-radius: 0;
  }
}

/*
* combinatorial explosion
* n * n combinations
**/

p,
div,
ul,
ol {
  & & {
    box-sizing: border-box;
  }
}

/*
* Extend
* selector:extend(class) extend the selector onto the class, where the class appear
**/

.nav {
  background: blue;
  &:extend(.inline);
}

.inline {
  color: red;
}

/*
* "all" keyword will extend all instance of ".b" e.g. '.d.b' '.b.d'
**/

//demo1
.a:extend(.b) {
  background: #000;
}

.b {
  background: red;
}

.c:extend(.d all) {
  background: yellow;
}

// demo2
.d {
  background: orange;

  div {
    color: #000;
  }
}

.demo .d {
  background: white;
}

//demo3

.e:extend(.f, .g):extend(.h) {
  background: #eee;
}

.f {
  background: #fff;
}

.g {
  background: #999;
}

.h {
  background: #aaa;
}

//demo4

.big-1,
.big-2:extend(.Big2),
.big-3:extend(.Big3) {
  background: #000;
}

.Big2 {
  background: red;
}

.Big3 {
  background: green;
}

pre:hover:extend(div pre){
  background: #000;  
}

div pre {
  background: red;
}






