/*
* variable variables
**/
.box div {
  color: green;
}
.box.new div {
  color: red;
}
/*
* custom property
**/
.box {
  --color: green;
}
.box div {
  color: var(--color);
}
.box.new {
  --color: red;
}
/*
* Lazy Evaluation
* Variables do not need to be declared before being used.
* Note that when defining a variable twice, the last definition of 
* the variable is used, searching from the current scope.
**/
.lazy {
  color: orange;
}
.lazy.multi {
  color: #999;
}
/*
* $props v3.0.0
* Properties as Variables (NEW!!)
* You can easily treat properties like variables using the $props syntax.
* Sometimes this can make your code a litter lighter
**/
.props {
  color: #333;
}
.props_ok {
  background: #000;
}
/*
* default variables
**/
.testDefault {
  color: #cc0000;
}
/*
* parent selectors
**/
.parent.bg_one {
  background-color: #000;
}
.parent.bg_two {
  background-color: #666;
}
.parent.bg_three {
  background-color: #999;
}
.parent_one {
  background-color: #000;
}
.parent_two {
  background-color: #666;
}
.parent_three {
  background-color: #999;
}
.parent,
.parentChild {
  background: #000;
}
/*
* changing selector order
* It is useful to prepend a selector  to the inherit (parent) selectors.
**/
.borderRadius {
  border: 1px solid red;
  border-radius: 10px;
}
.noBorderRadius .borderRadius {
  border-radius: 0;
}
/*
* combinatorial explosion
* n * n combinations
**/
p p,
p div,
p ul,
p ol,
div p,
div div,
div ul,
div ol,
ul p,
ul div,
ul ul,
ul ol,
ol p,
ol div,
ol ul,
ol ol {
  box-sizing: border-box;
}
/*
* Extend
* selector:extend(class) extend the selector onto the class, where the class appear
**/
.nav {
  background: blue;
}
.inline,
.nav {
  color: red;
}
/*
* "all" keyword will extend all instance of ".b" e.g. '.d.b' '.b.d'
**/
.a {
  background: #000;
}
.b,
.a {
  background: red;
}
.c {
  background: yellow;
}
.d,
.c {
  background: orange;
}
.d div,
.c div {
  color: #000;
}
.demo .d,
.demo .c {
  background: white;
}
.e {
  background: #eee;
}
.f,
.e {
  background: #fff;
}
.g,
.e {
  background: #999;
}
.h,
.e {
  background: #aaa;
}
.big-1,
.big-2,
.big-3 {
  background: #000;
}
.Big2,
.big-2 {
  background: red;
}
.Big3,
.big-3 {
  background: green;
}
pre:hover {
  background: #000;
}
div pre,
pre:hover {
  background: red;
}
/*
* variable interpolation
**/
.banner {
  color: red;
}
*.class {
  color: blue;
}
* > .div {
  background: #000;
}
.ab.test,
.test.m,
.ab.replace,
.replace.m {
  color: red;
}
.testA,
.testB {
  clear: both;
}
/**
* selector interpolation with extend
**/
.someName {
  clear: both;
}
.some-class {
  color: rebeccapurple;
}
/*
* Scoping / Extend inside @media
* Currently, an :extend inside a @media declaration will only match selector inside the @media declaration
**/
@media screen {
  .screenClass,
  .innerMatch,
  .topMatchEverything {
    background: #000;
  }
}
.screenClass,
.topMatchEverything {
  background: yellow;
}
/*
* reducing css size
**/
.thing1 {
  display: inline;
  color: #000;
}
.thing2 {
  display: inline;
  color: #000;
}
.my-inline-block,
.thing3,
.thing4 {
  display: inline-block;
  font-size: 0;
}
.thing3 {
  background: red;
}
.mixins {
  border: 1px solid red;
}
.myClass {
  border: 1px solid red, 3px solid yellow;
}
.mixins2 {
  border: red;
}
.myClass2 {
  border: red 3px solid;
}
/*
* base use case
**/
.aa {
  background: #000;
}
.aa .cc {
  background: red;
}
.bbaa {
  background: #000;
}
.bbaa .cc {
  background: red;
}
/*
* Not Outputting the Mixins
**/
.myOutput {
  background: #000;
  background: red;
}
/*
*  Guarded NameSpaces
**/
#namespace .app {
  background: #000;
}
/*
* the !important keyword
**/
.unimportant {
  background: #666;
  color: #666;
}
.important {
  background: #000 !important;
  color: #000 !important;
}
/*
* parametric mixins
* multiple mixins with the same name, will auto match
**/
.testMultiMixins {
  color-1: #898989;
  color-2: #898989;
  padding-2: 2;
}
.testMultiMixins {
  color-2: #898989;
  padding-2: #7777;
  color-3: #898989;
  padding-3: #7777;
  margin-3: 3;
}
/*
* named parameters
**/
.test-result {
  test-color: 3px;
  test-padding: 2px;
  test-margin: 1px;
}
.test-result-2 {
  test-color: #111;
  test-padding: #222;
  test-margin: #333;
}
.test-result-3 {
  test-color: #111;
  test-padding: 20px;
  test-margin: 30px;
}
/*
* @arguments
**/
.test-border {
  border: 1px solid red;
}
.test-border2 {
  border: 1px solid red blue;
}
.test-border3 {
  border: solid red blue;
}
/*
* pattern matching
**/
.test-p {
  display: inline;
}
/*
* Using Mixins as a function
* less 3.5
**/
.test_average {
  padding: 4.5px;
}
.demo {
  background: red;
}
/*
* 9990000889999900077711
**/
